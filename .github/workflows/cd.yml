name: CI/CD Pipeline - Node.js to Azure VM

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          lfs: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage and JUnit reports
        env:
          JEST_JUNIT_OUTPUT: coverage/junit.xml
        run: |
          if npm run | grep -q "test:ci"; then
            npm run test:ci
          else
            echo "No test:ci script found, skipping tests"
          fi

      - name: Publish test results to Checks
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Jest Test Results
          path: coverage/junit.xml
          reporter: jest-junit
          fail-on-error: true

      - name: Upload test results to GitHub
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node
          path: coverage/
          retention-days: 30

      - name: Create deployment package
        run: |
          ZIP_NAME="deployment-$(date +%Y%m%d-%H%M%S).zip"
          STAGING_DIR="deploy_staging"
          rm -rf "$STAGING_DIR"
          mkdir -p "$STAGING_DIR"
          rsync -a --delete \
            --exclude ".git/" \
            --exclude ".github/" \
            --exclude "node_modules/" \
            --exclude "coverage/" \
            --exclude ".DS_Store" \
            ./ "$STAGING_DIR"/
          (cd "$STAGING_DIR" && zip -r "../$ZIP_NAME" .)
          echo "ZIP_NAME=$ZIP_NAME" >> "$GITHUB_ENV"

      - name: Azure login (client secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload package to Blob
        uses: azure/cli@v2
        env:
          ZIP_NAME: ${{ env.ZIP_NAME }}
          AZ_STORAGE_ACCOUNT: ${{ secrets.AZ_STORAGE_ACCOUNT }}
          AZ_STORAGE_CONTAINER: ${{ secrets.AZ_STORAGE_CONTAINER }}
          AZ_STORAGE_KEY: ${{ secrets.AZ_STORAGE_KEY }}
        with:
          inlineScript: |
            az storage blob upload \
              --account-name $AZ_STORAGE_ACCOUNT \
              --account-key $AZ_STORAGE_KEY \
              --container-name $AZ_STORAGE_CONTAINER \
              --file $ZIP_NAME \
              --name $ZIP_NAME \
              --overwrite

      - name: Deploy to Azure VM
        uses: azure/cli@v2
        env:
          ZIP_NAME: ${{ env.ZIP_NAME }}
        with:
          inlineScript: |
            SAS_TOKEN=$(az storage blob generate-sas \
              --account-name ${{ secrets.AZ_STORAGE_ACCOUNT }} \
              --account-key ${{ secrets.AZ_STORAGE_KEY }} \
              --container-name ${{ secrets.AZ_STORAGE_CONTAINER }} \
              --name $ZIP_NAME \
              --permissions r \
              --expiry $(date -u -d "1 hour" '+%Y-%m-%dT%H:%MZ') \
              -o tsv)

            az vm run-command invoke \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.AZURE_VM_NAME }} \
              --command-id RunShellScript \
              --scripts "
                sudo apt-get update -y &&
                sudo apt-get install -y unzip curl &&
                echo 'Downloading file: $ZIP_NAME' &&
                curl -o /tmp/$ZIP_NAME https://${{ secrets.AZ_STORAGE_ACCOUNT }}.blob.core.windows.net/${{ secrets.AZ_STORAGE_CONTAINER }}/$ZIP_NAME?\$SAS_TOKEN &&
                ls -lh /tmp/$ZIP_NAME &&
                TS=\$(date +%Y%m%d-%H%M%S) &&
                sudo mkdir -p /opt/myapp/releases/\$TS &&
                sudo unzip -o /tmp/$ZIP_NAME -d /opt/myapp/releases/\$TS &&
                sudo rm -f /opt/myapp/current &&
                sudo ln -s /opt/myapp/releases/\$TS /opt/myapp/current &&

                cd /opt/myapp/current &&
                curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&
                sudo apt-get install -y nodejs &&
                sudo npm install -g pm2 &&
                npm ci --omit=dev &&
                pm2 delete myapp || true &&
                pm2 start server.js --name myapp &&
                pm2 save
              "
